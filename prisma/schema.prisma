generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model equipment {
  equipment_id Int               @id @default(autoincrement())
  qr_code      String?           @db.VarChar(30)
  name         String            @db.VarChar(200)
  description  String?           @db.Text
  category     String            @db.VarChar(200)
  status       equipment_status? @default(Available)
  created_by   Int
  health       equipment_health? @default(Good)
  created_at   DateTime          @default(now()) @db.Timestamp(0)
  updated_at   DateTime          @default(now()) @db.Timestamp(0)
  users        users             @relation(fields: [created_by], references: [user_id], onUpdate: Restrict, map: "equipment_ibfk_1")
  needed       needed[]

  @@index([created_by], map: "created_by")
}

model users {
  user_id                                          Int             @id @default(autoincrement())
  username                                         String          @unique(map: "username") @db.VarChar(100)
  password_hash                                    String          @db.VarChar(255)
  email                                            String          @unique(map: "email") @db.VarChar(100)
  sex                                              users_sex?
  first_name                                       String          @db.VarChar(80)
  last_name                                        String          @db.VarChar(80)
  status                                           users_status?   @default(Active)
  user_type                                        users_user_type
  department                                       String?         @db.VarChar(150)
  student_id                                       String?         @db.VarChar(20)
  staff_id                                         String?         @db.VarChar(20)
  phone_number                                     String?         @db.VarChar(20)
  created_at                                       DateTime        @default(now()) @db.Timestamp(0)
  updated_at                                       DateTime        @default(now()) @db.Timestamp(0)
  last_login                                       DateTime?       @db.Timestamp(0)
  equipment                                        equipment[]
  transactions_transactions_user_idTousers         transactions[]  @relation("transactions_user_idTousers")
  transactions_transactions_requested_by_idTousers transactions[]  @relation("transactions_requested_by_idTousers")
  transactions_transactions_approved_by_idTousers  transactions[]  @relation("transactions_approved_by_idTousers")
}

model needed {
  needed_id                 Int                               @id @default(autoincrement())
  transaction_id            Int?
  equipment_id              Int?
  equipment_health_afteruse needed_equipment_health_afteruse? @default(None)
  transactions              transactions?                     @relation(fields: [transaction_id], references: [transaction_id], onDelete: Restrict, onUpdate: Restrict, map: "needed_ibfk_1")
  equipment                 equipment?                        @relation(fields: [equipment_id], references: [equipment_id], onDelete: Restrict, onUpdate: Restrict, map: "needed_ibfk_2")

  @@index([equipment_id], map: "equipment_id")
  @@index([transaction_id], map: "transaction_id")
}

model transactions {
  transaction_id                            Int                               @id @default(autoincrement())
  created_at                                DateTime                          @default(now()) @db.Timestamp(0)
  updated_at                                DateTime                          @default(now()) @db.Timestamp(0)
  managed_at                                DateTime?                         @db.Timestamp(0)
  user_id                                   Int?
  requested_by_id                           Int?
  approved_by_id                            Int?
  reservation_status                        transactions_reservation_status?  @default(Pending)
  transaction_status                        transactions_transaction_status?  @default(Upcoming)
  transaction_reason                        String?                           @db.Text
  transaction_category                      transactions_transaction_category
  date_of_use                               DateTime?                         @db.Timestamp(0)
  start_time                                DateTime?                         @db.Timestamp(0)
  end_time                                  DateTime?                         @db.Timestamp(0)
  returned_at                               DateTime?                         @db.Timestamp(0)
  comments_after_use                        String?                           @db.Text
  notif_user                                transactions_notif_user?          @default(Read)
  notif_incharge                            transactions_notif_incharge?      @default(Unread)
  needed                                    needed[]
  users_transactions_user_idTousers         users?                            @relation("transactions_user_idTousers", fields: [user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "transactions_ibfk_1")
  users_transactions_requested_by_idTousers users?                            @relation("transactions_requested_by_idTousers", fields: [requested_by_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "transactions_ibfk_2")
  users_transactions_approved_by_idTousers  users?                            @relation("transactions_approved_by_idTousers", fields: [approved_by_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "transactions_ibfk_3")

  @@index([approved_by_id], map: "approved_by_id")
  @@index([requested_by_id], map: "requested_by_id")
  @@index([user_id], map: "user_id")
}

enum users_sex {
  Male
  Female
}

enum equipment_health {
  New
  Excellent
  Good
  Fair
  Poor
  Broken
}

enum users_status {
  Active
  Inactive
  Deleted
}

enum users_user_type {
  Student
  Staff
  Incharge
  Admin
}

enum needed_equipment_health_afteruse {
  None
  Minor_Damage
  Major_Damage
  Lost
}

enum transactions_reservation_status {
  Pending
  Approved
  Rejected
  Expired
}

enum transactions_transaction_category {
  Equipment
  AVR_Venue @map("AVR Venue")
}

enum transactions_notif_user {
  Unread
  Read
}

enum transactions_notif_incharge {
  Unread
  Read
}

enum transactions_transaction_status {
  Upcoming
  Check_Out
  Ongoing
  On_Time
  Late
  Cancelled
  Expired
  Ready_for_Pickup
}

enum equipment_status {
  Available
  Checked_Out @map("Checked Out")
  Maintenance
  Retired
  Lost
  Deleted
}
