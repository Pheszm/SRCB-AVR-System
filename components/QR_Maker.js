import React, { useEffect, useRef } from 'react';

const QR_Maker = ({ value, size = 256 }) => {
  const qrContainerRef = useRef(null);  // Reference to the container
  const qrImageRef = useRef(null); // Reference to the QR code image

  useEffect(() => {
    // Dynamically load the QRCode.js script from the local path
    const script = document.createElement('script');
    script.src = './Assets/QR_Integration/QR_Generator.js';  // Path to your locally saved qrcode.min.js
    script.async = true;

    script.onload = () => {
      // Clear any existing QR codes in the container before generating a new one
      qrContainerRef.current.innerHTML = '';

      // Generate the QR code when the script is loaded
      const qrCode = new window.QRCode(qrContainerRef.current, {
        text: value,
        width: size,
        height: size,
        correctLevel: window.QRCode.CorrectLevel.L, // Set the error correction level (optional)
      });

      // Set a reference to the image element generated by QRCode.js
      const imgElement = qrContainerRef.current.querySelector('img');
      if (imgElement) {
        // Store the reference of the image for later use
        qrImageRef.current = imgElement;
        
        // Add a click event listener to trigger image download
        imgElement.addEventListener('click', () => {
          const link = document.createElement('a');
          link.href = imgElement.src; // Set the image URL as the download link
          link.download = 'qr_code.png'; // Set the default filename for the downloaded image
          link.click(); // Trigger the download
        });
      }
    };

    script.onerror = (error) => {
      console.error('Error loading QR code script:', error);
    };

    document.body.appendChild(script);

    // Cleanup when the component is unmounted
    return () => {
      document.body.removeChild(script);
    };
  }, [value, size]);  // Re-run when `value` or `size` changes

  return <div ref={qrContainerRef}></div>;
};

export { QR_Maker };
